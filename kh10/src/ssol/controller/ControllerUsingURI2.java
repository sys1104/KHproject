package ssol.controller;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ssol.action.CommandAction;
import ssol.action.NullAction;


public class ControllerUsingURI2 extends HttpServlet {
	private Map commandMap = new HashMap(); //명령어와 명령어 처리 클래스를 쌍으로 저장
	//명령어와 처리클래스가 매핑되어 있는 properties파일을 읽어서 Map 객체인 commandMap 에 저장
	//명렁어와 처리클래스가 매핑되어 있는 properties파일은 Command.properties파일
	public void init(ServletConfig config) throws ServletException {
		String props = config.getInitParameter("configFile2"); //web.xml에서 propertyConfig에 해당하는 init-param의 값을 읽음
		Properties pr = new Properties(); //명령어와 처리클래스의 매핑정보를 저장할 properties객체 생성
		FileInputStream f = null;
		try {
			String configFilePath = config.getServletContext().getRealPath(props);
			f = new FileInputStream(configFilePath);
			pr.load(f); //Command.properties파일의 정보를 Properties객체에 저장
		} catch(IOException e) {
			throw new ServletException(e);
		} finally {
			if(f!= null) try {f.close();} catch (IOException e) {}
		}
		Iterator keyIter = pr.keySet().iterator(); //Iterator객체는 Enumeration객체를 확장시킨 개념의 객체
		while(keyIter.hasNext()) {
			String command = (String)keyIter.next();
			String className = pr.getProperty(command);
			try {
				Class commandClass = Class.forName(className); //해당 문자열을 클래스로 만든다.
				Object commandInstance = commandClass.newInstance(); //해당 클래스의 객체를 생성
				commandMap.put(command, commandInstance); //Map객체인 commandMap에 객체저장
			} catch(ClassNotFoundException e) {
				throw new ServletException(e);
			} catch(InstantiationException e) {
				throw new ServletException(e);
			} catch(IllegalAccessException e) {
				throw new ServletException(e);
			}
		}
	}
	//get방식의 서비스 메서드
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		requestPro(request, response);
	}
	//post방식의 서비스 메서드
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		requestPro(request, response);
	}
	
	//사용자의 요청을 분석해서 해당 작업을 처리
	private void requestPro(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String view = null;
		CommandAction com = null;
		try {
			String command = request.getRequestURI();
			if(command.indexOf(request.getRequestURI()) == 0) {
				command = command.substring(request.getContextPath().length());
			}
			com = (CommandAction)commandMap.get(command);
			if(com == null) {
				com = new NullAction();
			}
			view = com.requestPro(request, response);
		}catch(Throwable e) {
			throw new ServletException(e);
		}
		RequestDispatcher dispatcher = request.getRequestDispatcher(view);
		dispatcher.forward(request, response);
	}
			
}
